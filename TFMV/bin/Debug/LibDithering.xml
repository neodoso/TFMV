<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibDithering</name>
    </assembly>
    <members>
        <member name="T:AtkinsonDitheringRGBByte">
            <summary>
            Atkinson dithering for RGB bytes
            </summary>
        </member>
        <member name="M:AtkinsonDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Atkinson dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:AtkinsonDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Atkinson dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:BurkesDitheringRGBByte">
            <summary>
            Burkes dithering for RGB bytes
            </summary>
        </member>
        <member name="M:BurkesDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Burkes dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:BurkesDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Burkes dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:DitheringBase`1">
            <summary>
            Abstract base class for dithering implementations
            </summary>
        </member>
        <member name="F:DitheringBase`1.width">
            <summary>
            Width of bitmap
            </summary>
        </member>
        <member name="F:DitheringBase`1.height">
            <summary>
            Height of bitmap
            </summary>
        </member>
        <member name="F:DitheringBase`1.methodLongName">
            <summary>
            Long name of the dither method
            </summary>
        </member>
        <member name="F:DitheringBase`1.fileNameAddition">
            <summary>
            Filename addition
            </summary>
        </member>
        <member name="F:DitheringBase`1.colorFunction">
            <summary>
            Color reduction function/method
            </summary>
        </member>
        <member name="F:DitheringBase`1.currentBitmap">
            <summary>
            Current bitmap
            </summary>
        </member>
        <member name="T:DitheringBase`1.ColorFunction">
            <summary>
            Color function for color reduction
            </summary>
            <param name="inputColors">Input colors</param>
            <param name="outputColors">Output colors</param>
        </member>
        <member name="M:DitheringBase`1.#ctor(DitheringBase{`0}.ColorFunction,System.String,System.String)">
            <summary>
            Base constructor
            </summary>
            <param name="colorfunc">Color reduction function/method</param>
            <param name="longName">Long name of dither method</param>
            <param name="fileNameAdd">Filename addition</param>
        </member>
        <member name="M:DitheringBase`1.DoDithering(IImageFormat{`0})">
            <summary>
            Do dithering for chosen image with chosen color reduction method. Work horse, call this when you want to dither something
            </summary>
            <param name="input">Input image</param>
            <returns>Dithered image</returns>
        </member>
        <member name="M:DitheringBase`1.GetMethodName">
            <summary>
            Get dither method name
            </summary>
            <returns>String method name</returns>
        </member>
        <member name="M:DitheringBase`1.GetFilenameAddition">
            <summary>
            Get filename addition
            </summary>
            <returns></returns>
        </member>
        <member name="M:DitheringBase`1.IsValidCoordinate(System.Int32,System.Int32)">
            <summary>
            Check if image coordinate is valid
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>True if valid; False otherwise</returns>
        </member>
        <member name="M:DitheringBase`1.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            How error cumulation should be handled. Implement this for every dithering method
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="M:DitheringBase`1.ModifyImageWithErrorAndMultiplier(System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Modify image with error and multiplier
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
            <param name="multiplier">Multiplier</param>
        </member>
        <member name="T:FakeDitheringRGBByte">
            <summary>
            Fake dithering doesn't do any dithering. It only does color reduction
            </summary>
        </member>
        <member name="M:FakeDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for fake dithering (no dither, just color reduction)
            </summary>
            <param name="colorfunc"></param>
            <returns></returns>
        </member>
        <member name="M:FakeDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Fake dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:FloydSteinbergDitheringRGBByte">
            <summary>
            Floyd-Steinberg dithering for RGB bytes
            </summary>
        </member>
        <member name="M:FloydSteinbergDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Floyd-Steinberg dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:FloydSteinbergDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Floyd-Steinberg dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:IImageFormat`1">
            <summary>
            Interface for our custom image formats
            </summary>
        </member>
        <member name="M:IImageFormat`1.GetWidth">
            <summary>
            Get width
            </summary>
            <returns>Width of image</returns>
        </member>
        <member name="M:IImageFormat`1.GetHeight">
            <summary>
            Get height
            </summary>
            <returns>Height of image</returns>
        </member>
        <member name="M:IImageFormat`1.GetChannelsPerPixel">
            <summary>
            Get channels per pixel
            </summary>
            <returns>Channels per pixel</returns>
        </member>
        <member name="M:IImageFormat`1.GetRawContent">
            <summary>
            Get raw content as array
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:IImageFormat`1.SetPixelChannels(System.Int32,System.Int32,`0[])">
            <summary>
            Set pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="newValues">New values</param>
        </member>
        <member name="M:IImageFormat`1.GetPixelChannels(System.Int32,System.Int32)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Values as array</returns>
        </member>
        <member name="M:IImageFormat`1.GetPixelChannels(System.Int32,System.Int32,`0[]@)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="pixelStorage">Array where pixel channels values will be written</param>
        </member>
        <member name="M:IImageFormat`1.GetQuantErrorsPerChannel(`0[],`0[])">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <returns>Error values as double array</returns>
        </member>
        <member name="M:IImageFormat`1.GetQuantErrorsPerChannel(`0[]@,`0[]@,System.Double[]@)">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <param name="errorValues">Error values as double array</param>
        </member>
        <member name="M:IImageFormat`1.ModifyPixelChannelsWithQuantError(`0[]@,System.Double[],System.Double)">
            <summary>
            Modify existing values with quantization errors
            </summary>
            <param name="modifyValues">Values to modify</param>
            <param name="quantErrors">Quantization errors</param>
            <param name="multiplier">Multiplier</param>
        </member>
        <member name="T:JarvisJudiceNinkeDitheringRGBByte">
            <summary>
            Jarvis-Judice-Ninke dithering for RGB bytes
            </summary>
        </member>
        <member name="M:JarvisJudiceNinkeDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Jarvis-Judice-Ninke dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:JarvisJudiceNinkeDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Jarvis-Judice-Ninke dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:SierraDitheringRGBByte">
            <summary>
            Sierra dithering for RGB bytes
            </summary>
        </member>
        <member name="M:SierraDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Sierra dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:SierraDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Sierra dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:SierraLiteDitheringRGBByte">
            <summary>
            Sierra lite dithering for RGB bytes
            </summary>
        </member>
        <member name="M:SierraLiteDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Sierra lite dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:SierraLiteDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Sierra lite dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:SierraTwoRowDitheringRGBByte">
            <summary>
            Sierra two row dithering for RGB bytes
            </summary>
        </member>
        <member name="M:SierraTwoRowDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Sierra two row dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:SierraTwoRowDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Sierra two row dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:StuckiDitheringRGBByte">
            <summary>
            Stucki dithering for RGB bytes
            </summary>
        </member>
        <member name="M:StuckiDitheringRGBByte.#ctor(DitheringBase{System.Byte}.ColorFunction)">
            <summary>
            Constructor for Stucki dithering
            </summary>
            <param name="colorfunc">Color function</param>
        </member>
        <member name="M:StuckiDitheringRGBByte.PushError(System.Int32,System.Int32,System.Double[])">
            <summary>
            Push error method for Stucki dithering
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="quantError">Quantization error</param>
        </member>
        <member name="T:TempByteImageFormat">
            <summary>
            Temp byte based image format. 0 is zero color, 255 is max color. Channels per color can be defined
            </summary>
        </member>
        <member name="F:TempByteImageFormat.width">
            <summary>
            Width of bitmap
            </summary>
        </member>
        <member name="F:TempByteImageFormat.height">
            <summary>
            Height of bitmap
            </summary>
        </member>
        <member name="F:TempByteImageFormat.channelsPerPixel">
            <summary>
            How many color channels per pixel
            </summary>
        </member>
        <member name="M:TempByteImageFormat.#ctor(System.Byte[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor for temp byte image format
            </summary>
            <param name="input">Input bitmap as three dimensional (widht, height, channels per pixel) byte array</param>
            <param name="createCopy">True if you want to create copy of data</param>
        </member>
        <member name="M:TempByteImageFormat.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor for temp byte image format
            </summary>
            <param name="input">Input byte array</param>
            <param name="imageWidth">Width</param>
            <param name="imageHeight">Height</param>
            <param name="imageChannelsPerPixel">Image channels per pixel</param>
            <param name="createCopy">True if you want to create copy of data</param>
        </member>
        <member name="M:TempByteImageFormat.#ctor(TempByteImageFormat)">
            <summary>
            Constructor for temp byte image format
            </summary>
            <param name="input">Existing TempByteImageFormat</param>
        </member>
        <member name="M:TempByteImageFormat.GetWidth">
            <summary>
            Get width of bitmap
            </summary>
            <returns>Width in pixels</returns>
        </member>
        <member name="M:TempByteImageFormat.GetHeight">
            <summary>
            Get height of bitmap
            </summary>
            <returns>Height in pixels</returns>
        </member>
        <member name="M:TempByteImageFormat.GetChannelsPerPixel">
            <summary>
            Get channels per pixel
            </summary>
            <returns>Channels per pixel</returns>
        </member>
        <member name="M:TempByteImageFormat.GetRawContent">
            <summary>
            Get raw content as byte array
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:TempByteImageFormat.SetPixelChannels(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Set pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="newValues">New values as object array</param>
        </member>
        <member name="M:TempByteImageFormat.GetPixelChannels(System.Int32,System.Int32)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Values as byte array</returns>
        </member>
        <member name="M:TempByteImageFormat.GetPixelChannels(System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="pixelStorage">Array where pixel channels values will be written</param>
        </member>
        <member name="M:TempByteImageFormat.GetQuantErrorsPerChannel(System.Byte[],System.Byte[])">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <returns>Error values as object array</returns>
        </member>
        <member name="M:TempByteImageFormat.GetQuantErrorsPerChannel(System.Byte[]@,System.Byte[]@,System.Double[]@)">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <param name="errorValues">Error values as double array</param>
        </member>
        <member name="M:TempByteImageFormat.ModifyPixelChannelsWithQuantError(System.Byte[]@,System.Double[],System.Double)">
            <summary>
            Modify existing values with quantization errors
            </summary>
            <param name="modifyValues">Values to modify</param>
            <param name="quantErrors">Quantization errors</param>
            <param name="multiplier">Multiplier</param>
        </member>
        <member name="T:TempDoubleImageFormat">
            <summary>
            Temp double based image format. 0.0 is zero color, 1.0 is max color
            </summary>
        </member>
        <member name="F:TempDoubleImageFormat.width">
            <summary>
            Width of bitmap
            </summary>
        </member>
        <member name="F:TempDoubleImageFormat.height">
            <summary>
            Height of bitmap
            </summary>
        </member>
        <member name="F:TempDoubleImageFormat.channelsPerPixel">
            <summary>
            How many color channels per pixel
            </summary>
        </member>
        <member name="M:TempDoubleImageFormat.#ctor(System.Double[0:,0:,0:],System.Boolean)">
            <summary>
            Constructor for temp double image format
            </summary>
            <param name="input">Input bitmap as three dimensional (widht, height, channels per pixel) double array</param>
            <param name="createCopy">True if you want to create copy of data</param>
        </member>
        <member name="M:TempDoubleImageFormat.#ctor(System.Double[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor for temp double image format
            </summary>
            <param name="input">Input double array</param>
            <param name="imageWidth">Width</param>
            <param name="imageHeight">Height</param>
            <param name="imageChannelsPerPixel">Image channels per pixel</param>
            <param name="createCopy">True if you want to create copy of data</param>
        </member>
        <member name="M:TempDoubleImageFormat.#ctor(TempDoubleImageFormat)">
            <summary>
            Constructor for temp double image format
            </summary>
            <param name="input">Existing TempDoubleImageFormat</param>
        </member>
        <member name="M:TempDoubleImageFormat.GetWidth">
            <summary>
            Get width of bitmap
            </summary>
            <returns>Width in pixels</returns>
        </member>
        <member name="M:TempDoubleImageFormat.GetHeight">
            <summary>
            Get height of bitmap
            </summary>
            <returns>Height in pixels</returns>
        </member>
        <member name="M:TempDoubleImageFormat.GetChannelsPerPixel">
            <summary>
            Get channels per pixel
            </summary>
            <returns>Channels per pixel</returns>
        </member>
        <member name="M:TempDoubleImageFormat.GetRawContent">
            <summary>
            Get raw content as double array
            </summary>
            <returns>Double array</returns>
        </member>
        <member name="M:TempDoubleImageFormat.SetPixelChannels(System.Int32,System.Int32,System.Double[])">
            <summary>
            Set pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="newValues">New values as double array</param>
        </member>
        <member name="M:TempDoubleImageFormat.GetPixelChannels(System.Int32,System.Int32)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Values as double array</returns>
        </member>
        <member name="M:TempDoubleImageFormat.GetPixelChannels(System.Int32,System.Int32,System.Double[]@)">
            <summary>
            Get pixel channels of certain coordinate
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="pixelStorage">Array where pixel channels values will be written</param>
        </member>
        <member name="M:TempDoubleImageFormat.GetQuantErrorsPerChannel(System.Double[],System.Double[])">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <returns>Error values as double array</returns>
        </member>
        <member name="M:TempDoubleImageFormat.GetQuantErrorsPerChannel(System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Get quantization errors per channel
            </summary>
            <param name="originalPixel">Original pixels</param>
            <param name="newPixel">New pixels</param>
            <param name="errorValues">Error values as double array</param>
        </member>
        <member name="M:TempDoubleImageFormat.ModifyPixelChannelsWithQuantError(System.Double[]@,System.Double[],System.Double)">
            <summary>
            Modify existing values with quantization errors
            </summary>
            <param name="modifyValues">Values to modify</param>
            <param name="quantErrors">Quantization errors</param>
            <param name="multiplier">Multiplier</param>
        </member>
    </members>
</doc>
